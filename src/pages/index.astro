---
import { getCollection } from "astro:content";
import Container from "@components/Container.astro";
import PageLayout from "@layouts/PageLayout.astro";
import ArrowCard from "@components/ArrowCard.astro";
import Link from "@components/Link.astro";
import { dateRange } from "@lib/utils";
import { SITE, HOME, SOCIALS } from "@consts";

const projects = (await getCollection("projects"))
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

const allwork = (await getCollection("work"))
  .sort((a, b) => new Date(b.data.dateStart).valueOf() - new Date(a.data.dateStart).valueOf());

const work = await Promise.all(
  allwork.map(async (item) => {
    const { Content } = await item.render();
    return { ...item, Content };
  })
);

---

<PageLayout title={HOME.TITLE} description={HOME.DESCRIPTION}>
  <Container>
    <h4 class="animate font-semibold text-black dark:text-white">
      Hi, I'm Lucas Coppola
    </h4>
    <div class="space-y-16">
      <section>
        <article class="space-y-4">
          <p class="animate">
            I love to build things and solve problems. I enjoy web development and 
            do most of my work in the terminal. Besides coding, I have a strong 
            interest in strength sports and training, which led me to create 
            <Link href="">Lift</Link>.
          </p>
          <p class="animate">
            Most of my experience is in the Javascript ecosystem, especially
            in backend development using technologies like Node, Express, various ORMs,
            and SQL databases like PostgreSQL and SQLite. 
            I also have experience with frontend technologies like React and Next.js. 
          </p>
        </article>
      </section>

      <section class="animate space-y-6">
        <div class="flex flex-wrap gap-y-2 items-center justify-between">
          <h5 class="font-semibold text-black dark:text-white">
            Work Experience
          </h5>
        </div>
        <ul class="flex flex-col space-y-4">
          {work.map(entry => (
            <li>
              <div class="text-sm dark:opacity-75 font-serif">
                {dateRange(entry.data.dateStart, entry.data.dateEnd)}
              </div>
              <div class="font-semibold text-black dark:text-white">
                {entry.data.company}
              </div>
              <div class="text-sm dark:opacity-75 font-serif">
                {entry.data.role}
              </div>
              <article>
                <entry.Content />
              </article>
            </li>
          ))}
        </ul>
      </section>

      <section class="animate space-y-6">
        <div class="flex flex-wrap gap-y-2 items-center justify-between">
          <h5 class="font-semibold text-black dark:text-white">
            Projects
          </h5>
          <Link href="/projects">
            See all projects
          </Link>
        </div>
        <ul class="flex flex-col gap-4">
          {projects.map(project => (
            <li>
              <ArrowCard entry={project} />
            </li>
          ))}
        </ul>
      </section>

      <section class="animate space-y-4">
        <h5 class="font-semibold text-black dark:text-white">
          Let's Connect
        </h5>
        <article>
          <p>
            If you want to get in touch with me about something or just to say hi,
            reach out on social media or send me an email.
          </p>
        </article>
        <ul class="flex flex-wrap gap-2">
          {SOCIALS.map(SOCIAL => (
            <li class="flex gap-x-2 text-nowrap">
              <Link href={SOCIAL.HREF} external aria-label={`${SITE.NAME} on ${SOCIAL.NAME}`}>
                {SOCIAL.NAME}
              </Link>
              {"/"}
            </li>
          ))}
          <li 
            id="copy-button" 
            class="line-clamp-1 flex items-center gap-x-2 cursor-pointer decoration-black/15 
              dark:decoration-white/30 hover:decoration-black/25 hover:dark:decoration-white/50 
              text-current hover:text-black hover:dark:text-white transition-colors duration-300 
              ease-in-out underline underline-offset-2"
            >
            <p aria-label={`Email ${SITE.NAME}`}>
              {SITE.EMAIL}
            </p>
            <!-- copy icon -->
            <svg 
              id="copy-icon"
              xmlns="http://www.w3.org/2000/svg" 
              width="16" 
              height="16" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              stroke-width="2" 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              class="lucide lucide-copy"
            >
                <rect width="14" height="14" x="8" y="8" rx="2" ry="2"/>
                <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"/>
            </svg>
            <!-- check icon -->
            <svg 
              id="check-icon"
              xmlns="http://www.w3.org/2000/svg" 
              width="16" 
              height="16" 
              viewBox="0 0 24 24" 
              fill="none" 
              stroke="currentColor" 
              stroke-width="2" 
              stroke-linecap="round" 
              stroke-linejoin="round" 
              class="lucide lucide-check"
              style="display: none;"
            >
                <path d="M20 6 9 17l-5-5"/>
            </svg>
          </li>
        </ul>
      </section>
    </div>
  </Container>
</PageLayout>

<script>
  async function copyToClipboard() {
    if (!navigator.clipboard) {
      console.warn("Clipboard API not available");
      return false;
    }
    try {
      await navigator.clipboard.writeText("lucascoppola21@gmail.com");
      return true;
    } catch (err) {
      console.error("Failed to copy: ", err);
      return false;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const copyButton = document.getElementById("copy-button");
    const copyIcon = document.getElementById("copy-icon");
    const checkIcon = document.getElementById("check-icon");

    if (copyIcon && checkIcon && copyButton) {
      copyButton.addEventListener("click", async () => {
        const copied = await copyToClipboard();

        if (copied) {
          copyIcon.style.display = "none";
          checkIcon.style.display = "block";

          setTimeout(() => {
            copyIcon.style.display = "block";
            checkIcon.style.display = "none";
          }, 2000);
        }
      });
    }
  });
</script>
